import { __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
import { Injectable } from '@angular/core';
var Pedometer = /** @class */ (function (_super) {
    __extends(Pedometer, _super);
    function Pedometer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Pedometer.prototype.isStepCountingAvailable = function () { return cordova(this, "isStepCountingAvailable", {}, arguments); };
    Pedometer.prototype.isDistanceAvailable = function () { return cordova(this, "isDistanceAvailable", {}, arguments); };
    Pedometer.prototype.isFloorCountingAvailable = function () { return cordova(this, "isFloorCountingAvailable", {}, arguments); };
    Pedometer.prototype.startPedometerUpdates = function () { return cordova(this, "startPedometerUpdates", { "observable": true, "clearFunction": "stopPedometerUpdates" }, arguments); };
    Pedometer.prototype.stopPedometerUpdates = function () { return cordova(this, "stopPedometerUpdates", {}, arguments); };
    Pedometer.prototype.queryData = function (options) { return cordova(this, "queryData", { "callbackOrder": "reverse" }, arguments); };
    Pedometer.pluginName = "Pedometer";
    Pedometer.plugin = "cordova-plugin-pedometer";
    Pedometer.pluginRef = "pedometer";
    Pedometer.repo = "https://github.com/leecrossley/cordova-plugin-pedometer";
    Pedometer.platforms = ["Android", "iOS"];
    Pedometer.decorators = [
        { type: Injectable }
    ];
    return Pedometer;
}(IonicNativePlugin));
export { Pedometer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3BlZG9tZXRlci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztJQTBDWiw2QkFBaUI7Ozs7SUFNOUMsMkNBQXVCO0lBV3ZCLHVDQUFtQjtJQVduQiw0Q0FBd0I7SUFleEIseUNBQXFCO0lBU3JCLHdDQUFvQjtJQWVwQiw2QkFBUyxhQUFDLE9BQTJDOzs7Ozs7O2dCQXBFdEQsVUFBVTs7b0JBM0NYO0VBNEMrQixpQkFBaUI7U0FBbkMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEludGVyZmFjZSBvZiBhIHBlZG9tZXRlciBkYXRhIG9iamVjdCB3aGljaCBpcyByZXR1cm5lZCBieSB3YXRjaGluZyBmb3IgbmV3IGRhdGEgb3IgYnkgcmVjaWV2aW5nIGhpc3RvcmljYWwgZGF0YVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElQZWRvbWV0ZXJEYXRhIHtcbiAgc3RhcnREYXRlPzogbnVtYmVyO1xuICBlbmREYXRlPzogbnVtYmVyO1xuICBudW1iZXJPZlN0ZXBzOiBudW1iZXI7XG4gIGRpc3RhbmNlOiBudW1iZXI7XG4gIGZsb29yc0FzY2VuZGVkOiBudW1iZXI7XG4gIGZsb29yc0Rlc2NlbmRlZDogbnVtYmVyO1xufVxuXG4vKipcbiAqIEBuYW1lIFBlZG9tZXRlclxuICogQGRlc2NyaXB0aW9uXG4gKiBGZXRjaCBwZWRlc3RyaWFuLXJlbGF0ZWQgcGVkb21ldGVyIGRhdGEsXG4gKiBzdWNoIGFzIHN0ZXAgY291bnRzIGFuZCBvdGhlciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZGlzdGFuY2UgdHJhdmVsbGVkLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgUGVkb21ldGVyIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9wZWRvbWV0ZXIvbmd4JztcbiAqXG4gKiBQZWRvbWV0ZXIuaXNEaXN0YW5jZUF2YWlsYWJsZSgpXG4gKiAgIC50aGVuKChhdmFpbGFibGU6IGJvb2xlYW4pID0+IGNvbnNvbGUubG9nKGF2YWlsYWJsZSkpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5sb2coZXJyb3IpKTtcbiAqXG4gKiBQZWRvbWV0ZXIuc3RhcnRQZWRvbWV0ZXJVcGRhdGVzKClcbiAqICAgIC5zdWJzY3JpYmUoKGRhdGE6IElQZWRvbWV0ZXJEYXRhKSA9PiB7XG4gKiAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICogICAgfSk7XG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdQZWRvbWV0ZXInLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1wZWRvbWV0ZXInLFxuICBwbHVnaW5SZWY6ICdwZWRvbWV0ZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2xlZWNyb3NzbGV5L2NvcmRvdmEtcGx1Z2luLXBlZG9tZXRlcicsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQZWRvbWV0ZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBDaGVja3MgaWYgc3RlcCBjb3VudGluZyBpcyBhdmFpbGFibGUuIE9ubHkgd29ya3Mgb24gaU9TLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gZmVhdHVyZSBpcyBzdXBwb3J0ZWQgKHRydWUpIG9yIG5vdCBzdXBwb3J0ZWQgKGZhbHNlKVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpc1N0ZXBDb3VudGluZ0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGlzdGFuY2UgZXN0aW1hdGlvbiBpbmRpY2F0ZXMgdGhlIGFiaWxpdHkgdG8gdXNlIHN0ZXAgaW5mb3JtYXRpb24gdG8gc3VwcGx5IHRoZSBhcHByb3hpbWF0ZSBkaXN0YW5jZSB0cmF2ZWxsZWQgYnkgdGhlIHVzZXIuXG4gICAqIFRoaXMgY2FwYWJpbGl0eSBpcyBub3Qgc3VwcG9ydGVkIG9uIGFsbCBkZXZpY2VzLCBldmVuIHdpdGggaU9TIDguXG4gICAqIE9ubHkgd29ya3Mgb24gaU9TLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gZmVhdHVyZSBpcyBzdXBwb3J0ZWQgKHRydWUpIG9yIG5vdCBzdXBwb3J0ZWQgKGZhbHNlKVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpc0Rpc3RhbmNlQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGbG9vciBjb3VudGluZyBpbmRpY2F0ZXMgdGhlIGFiaWxpdHkgdG8gY291bnQgdGhlIG51bWJlciBvZiBmbG9vcnMgdGhlIHVzZXIgd2Fsa3MgdXAgb3IgZG93biB1c2luZyBzdGFpcnMuXG4gICAqIFRoaXMgY2FwYWJpbGl0eSBpcyBub3Qgc3VwcG9ydGVkIG9uIGFsbCBkZXZpY2VzLCBldmVuIHdpdGggaU9TIDguXG4gICAqIE9ubHkgd29ya3Mgb24gaU9TLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gZmVhdHVyZSBpcyBzdXBwb3J0ZWQgKHRydWUpIG9yIG5vdCBzdXBwb3J0ZWQgKGZhbHNlKVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpc0Zsb29yQ291bnRpbmdBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgZGVsaXZlcnkgb2YgcmVjZW50IHBlZGVzdHJpYW4tcmVsYXRlZCBkYXRhIHRvIHlvdXIgQ29yZG92YSBhcHAuXG4gICAqXG4gICAqIFdoZW4gdGhlIGFwcCBpcyBzdXNwZW5kZWQsIHRoZSBkZWxpdmVyeSBvZiB1cGRhdGVzIHN0b3BzIHRlbXBvcmFyaWx5LlxuICAgKiBVcG9uIHJldHVybmluZyB0byBmb3JlZ3JvdW5kIG9yIGJhY2tncm91bmQgZXhlY3V0aW9uLCB0aGUgcGVkb21ldGVyIG9iamVjdCBiZWdpbnMgdXBkYXRlcyBhZ2Fpbi5cbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxJUGVkb21ldGVyRGF0YT59IFJldHVybnMgYSBPYnNlcnZhYmxlIHRoYXQgcmVjaWV2ZXMgcmVwZWF0bHkgZGF0YSBmcm9tIHBlZG9tZXRlciBpbiBiYWNrZ3JvdW5kLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gICAgY2xlYXJGdW5jdGlvbjogJ3N0b3BQZWRvbWV0ZXJVcGRhdGVzJyxcbiAgfSlcbiAgc3RhcnRQZWRvbWV0ZXJVcGRhdGVzKCk6IE9ic2VydmFibGU8SVBlZG9tZXRlckRhdGE+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RvcHMgdGhlIGRlbGl2ZXJ5IG9mIHJlY2VudCBwZWRlc3RyaWFuIGRhdGEgdXBkYXRlcyB0byB5b3VyIENvcmRvdmEgYXBwLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gcGVkb21ldGVyIHdhdGNoaW5nIHdhcyBzdG9wcGVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3BQZWRvbWV0ZXJVcGRhdGVzKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgZGF0YSBiZXR3ZWVuIHRoZSBzcGVjaWZpZWQgc3RhcnQgYW5kIGVuZCBkYXRlcy5cbiAgICogVGhlIHN0YXJ0RGF0ZSBhbmQgZW5kRGF0ZSBvcHRpb25zIGFyZSByZXF1aXJlZCBhbmQgY2FuIGJlIGNvbnN0cnVjdGVkIGluIGFueSB2YWxpZCBKYXZhU2NyaXB0IHdheVxuICAgKiAoZS5nLiBuZXcgRGF0ZSgyMDE1LCA0LCAxLCAxNSwgMjAsIDAwKSBpcyBhbHNvIHZhbGlkLCBhcyBpcyBtaWxsaXNlY29uZHMpLlxuICAgKiBPbmx5IHdvcmtzIG9uIGlPUy5cbiAgICogQHBhcmFtIHthbnl9IG9wdGlvbnMgIHN0YXJ0IGRhdGUgYW5kIGVuIGRhdGUgd2hlcmUgeW91IHdhbnQgdG8gZ2V0IHBlZG9tZXRlciBkYXRhXG4gICAqIEByZXR1cm4ge1Byb21pc2U8SVBlZG9tZXRlckRhdGE+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gcGVkb21ldGVyIGRhdGEgZm91bmRcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXG4gIH0pXG4gIHF1ZXJ5RGF0YShvcHRpb25zOiB7IHN0YXJ0RGF0ZTogRGF0ZTsgZW5kRGF0ZTogRGF0ZSB9KTogUHJvbWlzZTxJUGVkb21ldGVyRGF0YT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19