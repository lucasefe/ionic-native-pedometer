var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var PedometerOriginal = /** @class */ (function (_super) {
    __extends(PedometerOriginal, _super);
    function PedometerOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PedometerOriginal.prototype.isStepCountingAvailable = function () { return cordova(this, "isStepCountingAvailable", {}, arguments); };
    PedometerOriginal.prototype.isDistanceAvailable = function () { return cordova(this, "isDistanceAvailable", {}, arguments); };
    PedometerOriginal.prototype.isFloorCountingAvailable = function () { return cordova(this, "isFloorCountingAvailable", {}, arguments); };
    PedometerOriginal.prototype.startPedometerUpdates = function () { return cordova(this, "startPedometerUpdates", { "observable": true, "clearFunction": "stopPedometerUpdates" }, arguments); };
    PedometerOriginal.prototype.stopPedometerUpdates = function () { return cordova(this, "stopPedometerUpdates", {}, arguments); };
    PedometerOriginal.prototype.queryData = function (options) { return cordova(this, "queryData", { "callbackOrder": "reverse" }, arguments); };
    PedometerOriginal.pluginName = "Pedometer";
    PedometerOriginal.plugin = "cordova-plugin-pedometer";
    PedometerOriginal.pluginRef = "pedometer";
    PedometerOriginal.repo = "https://github.com/leecrossley/cordova-plugin-pedometer";
    PedometerOriginal.platforms = ["Android", "iOS"];
    return PedometerOriginal;
}(IonicNativePlugin));
var Pedometer = new PedometerOriginal();
export { Pedometer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3BlZG9tZXRlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQTJDSCw2QkFBaUI7Ozs7SUFNOUMsMkNBQXVCO0lBV3ZCLHVDQUFtQjtJQVduQiw0Q0FBd0I7SUFleEIseUNBQXFCO0lBU3JCLHdDQUFvQjtJQWVwQiw2QkFBUyxhQUFDLE9BQTJDOzs7Ozs7b0JBL0d2RDtFQTRDK0IsaUJBQWlCO1NBQW5DLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBJbnRlcmZhY2Ugb2YgYSBwZWRvbWV0ZXIgZGF0YSBvYmplY3Qgd2hpY2ggaXMgcmV0dXJuZWQgYnkgd2F0Y2hpbmcgZm9yIG5ldyBkYXRhIG9yIGJ5IHJlY2lldmluZyBoaXN0b3JpY2FsIGRhdGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUGVkb21ldGVyRGF0YSB7XG4gIHN0YXJ0RGF0ZT86IG51bWJlcjtcbiAgZW5kRGF0ZT86IG51bWJlcjtcbiAgbnVtYmVyT2ZTdGVwczogbnVtYmVyO1xuICBkaXN0YW5jZTogbnVtYmVyO1xuICBmbG9vcnNBc2NlbmRlZDogbnVtYmVyO1xuICBmbG9vcnNEZXNjZW5kZWQ6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBAbmFtZSBQZWRvbWV0ZXJcbiAqIEBkZXNjcmlwdGlvblxuICogRmV0Y2ggcGVkZXN0cmlhbi1yZWxhdGVkIHBlZG9tZXRlciBkYXRhLFxuICogc3VjaCBhcyBzdGVwIGNvdW50cyBhbmQgb3RoZXIgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGRpc3RhbmNlIHRyYXZlbGxlZC5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFBlZG9tZXRlciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvcGVkb21ldGVyL25neCc7XG4gKlxuICogUGVkb21ldGVyLmlzRGlzdGFuY2VBdmFpbGFibGUoKVxuICogICAudGhlbigoYXZhaWxhYmxlOiBib29sZWFuKSA9PiBjb25zb2xlLmxvZyhhdmFpbGFibGUpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycm9yKSk7XG4gKlxuICogUGVkb21ldGVyLnN0YXJ0UGVkb21ldGVyVXBkYXRlcygpXG4gKiAgICAuc3Vic2NyaWJlKChkYXRhOiBJUGVkb21ldGVyRGF0YSkgPT4ge1xuICogICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAqICAgIH0pO1xuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnUGVkb21ldGVyJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tcGVkb21ldGVyJyxcbiAgcGx1Z2luUmVmOiAncGVkb21ldGVyJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9sZWVjcm9zc2xleS9jb3Jkb3ZhLXBsdWdpbi1wZWRvbWV0ZXInLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGVkb21ldGVyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ2hlY2tzIGlmIHN0ZXAgY291bnRpbmcgaXMgYXZhaWxhYmxlLiBPbmx5IHdvcmtzIG9uIGlPUy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGZlYXR1cmUgaXMgc3VwcG9ydGVkICh0cnVlKSBvciBub3Qgc3VwcG9ydGVkIChmYWxzZSlcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNTdGVwQ291bnRpbmdBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3RhbmNlIGVzdGltYXRpb24gaW5kaWNhdGVzIHRoZSBhYmlsaXR5IHRvIHVzZSBzdGVwIGluZm9ybWF0aW9uIHRvIHN1cHBseSB0aGUgYXBwcm94aW1hdGUgZGlzdGFuY2UgdHJhdmVsbGVkIGJ5IHRoZSB1c2VyLlxuICAgKiBUaGlzIGNhcGFiaWxpdHkgaXMgbm90IHN1cHBvcnRlZCBvbiBhbGwgZGV2aWNlcywgZXZlbiB3aXRoIGlPUyA4LlxuICAgKiBPbmx5IHdvcmtzIG9uIGlPUy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGZlYXR1cmUgaXMgc3VwcG9ydGVkICh0cnVlKSBvciBub3Qgc3VwcG9ydGVkIChmYWxzZSlcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNEaXN0YW5jZUF2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRmxvb3IgY291bnRpbmcgaW5kaWNhdGVzIHRoZSBhYmlsaXR5IHRvIGNvdW50IHRoZSBudW1iZXIgb2YgZmxvb3JzIHRoZSB1c2VyIHdhbGtzIHVwIG9yIGRvd24gdXNpbmcgc3RhaXJzLlxuICAgKiBUaGlzIGNhcGFiaWxpdHkgaXMgbm90IHN1cHBvcnRlZCBvbiBhbGwgZGV2aWNlcywgZXZlbiB3aXRoIGlPUyA4LlxuICAgKiBPbmx5IHdvcmtzIG9uIGlPUy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGZlYXR1cmUgaXMgc3VwcG9ydGVkICh0cnVlKSBvciBub3Qgc3VwcG9ydGVkIChmYWxzZSlcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNGbG9vckNvdW50aW5nQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIGRlbGl2ZXJ5IG9mIHJlY2VudCBwZWRlc3RyaWFuLXJlbGF0ZWQgZGF0YSB0byB5b3VyIENvcmRvdmEgYXBwLlxuICAgKlxuICAgKiBXaGVuIHRoZSBhcHAgaXMgc3VzcGVuZGVkLCB0aGUgZGVsaXZlcnkgb2YgdXBkYXRlcyBzdG9wcyB0ZW1wb3JhcmlseS5cbiAgICogVXBvbiByZXR1cm5pbmcgdG8gZm9yZWdyb3VuZCBvciBiYWNrZ3JvdW5kIGV4ZWN1dGlvbiwgdGhlIHBlZG9tZXRlciBvYmplY3QgYmVnaW5zIHVwZGF0ZXMgYWdhaW4uXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8SVBlZG9tZXRlckRhdGE+fSBSZXR1cm5zIGEgT2JzZXJ2YWJsZSB0aGF0IHJlY2lldmVzIHJlcGVhdGx5IGRhdGEgZnJvbSBwZWRvbWV0ZXIgaW4gYmFja2dyb3VuZC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgIGNsZWFyRnVuY3Rpb246ICdzdG9wUGVkb21ldGVyVXBkYXRlcycsXG4gIH0pXG4gIHN0YXJ0UGVkb21ldGVyVXBkYXRlcygpOiBPYnNlcnZhYmxlPElQZWRvbWV0ZXJEYXRhPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3BzIHRoZSBkZWxpdmVyeSBvZiByZWNlbnQgcGVkZXN0cmlhbiBkYXRhIHVwZGF0ZXMgdG8geW91ciBDb3Jkb3ZhIGFwcC5cbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHBlZG9tZXRlciB3YXRjaGluZyB3YXMgc3RvcHBlZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdG9wUGVkb21ldGVyVXBkYXRlcygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIGRhdGEgYmV0d2VlbiB0aGUgc3BlY2lmaWVkIHN0YXJ0IGFuZCBlbmQgZGF0ZXMuXG4gICAqIFRoZSBzdGFydERhdGUgYW5kIGVuZERhdGUgb3B0aW9ucyBhcmUgcmVxdWlyZWQgYW5kIGNhbiBiZSBjb25zdHJ1Y3RlZCBpbiBhbnkgdmFsaWQgSmF2YVNjcmlwdCB3YXlcbiAgICogKGUuZy4gbmV3IERhdGUoMjAxNSwgNCwgMSwgMTUsIDIwLCAwMCkgaXMgYWxzbyB2YWxpZCwgYXMgaXMgbWlsbGlzZWNvbmRzKS5cbiAgICogT25seSB3b3JrcyBvbiBpT1MuXG4gICAqIEBwYXJhbSB7YW55fSBvcHRpb25zICBzdGFydCBkYXRlIGFuZCBlbiBkYXRlIHdoZXJlIHlvdSB3YW50IHRvIGdldCBwZWRvbWV0ZXIgZGF0YVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPElQZWRvbWV0ZXJEYXRhPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHBlZG9tZXRlciBkYXRhIGZvdW5kXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICB9KVxuICBxdWVyeURhdGEob3B0aW9uczogeyBzdGFydERhdGU6IERhdGU7IGVuZERhdGU6IERhdGUgfSk6IFByb21pc2U8SVBlZG9tZXRlckRhdGE+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==